// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/znodedatastructure.proto

package zookeeper.util;

public final class Znode {
  private Znode() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class ServerData extends
      com.google.protobuf.GeneratedMessage {
    // Use ServerData.newBuilder() to construct.
    private ServerData() {
      initFields();
    }
    private ServerData(boolean noInit) {}
    
    private static final ServerData defaultInstance;
    public static ServerData getDefaultInstance() {
      return defaultInstance;
    }
    
    public ServerData getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return zookeeper.util.Znode.internal_static_serialization_ServerData_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return zookeeper.util.Znode.internal_static_serialization_ServerData_fieldAccessorTable;
    }
    
    public enum Status
        implements com.google.protobuf.ProtocolMessageEnum {
      ACCEPT_ENSEMBLE_REQUEST(0, 0),
      REJECT_ENSEMBLE_REQUEST(1, 1),
      ;
      
      
      public final int getNumber() { return value; }
      
      public static Status valueOf(int value) {
        switch (value) {
          case 0: return ACCEPT_ENSEMBLE_REQUEST;
          case 1: return REJECT_ENSEMBLE_REQUEST;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<Status>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Status>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Status>() {
              public Status findValueByNumber(int number) {
                return Status.valueOf(number)
      ;        }
            };
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return zookeeper.util.Znode.ServerData.getDescriptor().getEnumTypes().get(0);
      }
      
      private static final Status[] VALUES = {
        ACCEPT_ENSEMBLE_REQUEST, REJECT_ENSEMBLE_REQUEST, 
      };
      public static Status valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      private final int index;
      private final int value;
      private Status(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      static {
        zookeeper.util.Znode.getDescriptor();
      }
      
      // @@protoc_insertion_point(enum_scope:serialization.ServerData.Status)
    }
    
    // required string socketAddress = 1;
    public static final int SOCKETADDRESS_FIELD_NUMBER = 1;
    private boolean hasSocketAddress;
    private java.lang.String socketAddress_ = "";
    public boolean hasSocketAddress() { return hasSocketAddress; }
    public java.lang.String getSocketAddress() { return socketAddress_; }
    
    // optional string rack = 2;
    public static final int RACK_FIELD_NUMBER = 2;
    private boolean hasRack;
    private java.lang.String rack_ = "";
    public boolean hasRack() { return hasRack; }
    public java.lang.String getRack() { return rack_; }
    
    // optional .serialization.ServerData.Status stat = 3;
    public static final int STAT_FIELD_NUMBER = 3;
    private boolean hasStat;
    private zookeeper.util.Znode.ServerData.Status stat_;
    public boolean hasStat() { return hasStat; }
    public zookeeper.util.Znode.ServerData.Status getStat() { return stat_; }
    
    // optional int32 capacityLeft = 4;
    public static final int CAPACITYLEFT_FIELD_NUMBER = 4;
    private boolean hasCapacityLeft;
    private int capacityLeft_ = 0;
    public boolean hasCapacityLeft() { return hasCapacityLeft; }
    public int getCapacityLeft() { return capacityLeft_; }
    
    // repeated string ensembleList = 5;
    public static final int ENSEMBLELIST_FIELD_NUMBER = 5;
    private java.util.List<java.lang.String> ensembleList_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.String> getEnsembleListList() {
      return ensembleList_;
    }
    public int getEnsembleListCount() { return ensembleList_.size(); }
    public java.lang.String getEnsembleList(int index) {
      return ensembleList_.get(index);
    }
    
    private void initFields() {
      stat_ = zookeeper.util.Znode.ServerData.Status.ACCEPT_ENSEMBLE_REQUEST;
    }
    public final boolean isInitialized() {
      if (!hasSocketAddress) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSocketAddress()) {
        output.writeString(1, getSocketAddress());
      }
      if (hasRack()) {
        output.writeString(2, getRack());
      }
      if (hasStat()) {
        output.writeEnum(3, getStat().getNumber());
      }
      if (hasCapacityLeft()) {
        output.writeInt32(4, getCapacityLeft());
      }
      for (java.lang.String element : getEnsembleListList()) {
        output.writeString(5, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSocketAddress()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getSocketAddress());
      }
      if (hasRack()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getRack());
      }
      if (hasStat()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, getStat().getNumber());
      }
      if (hasCapacityLeft()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, getCapacityLeft());
      }
      {
        int dataSize = 0;
        for (java.lang.String element : getEnsembleListList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getEnsembleListList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static zookeeper.util.Znode.ServerData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static zookeeper.util.Znode.ServerData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static zookeeper.util.Znode.ServerData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static zookeeper.util.Znode.ServerData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static zookeeper.util.Znode.ServerData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static zookeeper.util.Znode.ServerData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static zookeeper.util.Znode.ServerData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static zookeeper.util.Znode.ServerData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static zookeeper.util.Znode.ServerData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static zookeeper.util.Znode.ServerData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(zookeeper.util.Znode.ServerData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private zookeeper.util.Znode.ServerData result;
      
      // Construct using zookeeper.util.Znode.ServerData.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new zookeeper.util.Znode.ServerData();
        return builder;
      }
      
      protected zookeeper.util.Znode.ServerData internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new zookeeper.util.Znode.ServerData();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return zookeeper.util.Znode.ServerData.getDescriptor();
      }
      
      public zookeeper.util.Znode.ServerData getDefaultInstanceForType() {
        return zookeeper.util.Znode.ServerData.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public zookeeper.util.Znode.ServerData build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private zookeeper.util.Znode.ServerData buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public zookeeper.util.Znode.ServerData buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.ensembleList_ != java.util.Collections.EMPTY_LIST) {
          result.ensembleList_ =
            java.util.Collections.unmodifiableList(result.ensembleList_);
        }
        zookeeper.util.Znode.ServerData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof zookeeper.util.Znode.ServerData) {
          return mergeFrom((zookeeper.util.Znode.ServerData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(zookeeper.util.Znode.ServerData other) {
        if (other == zookeeper.util.Znode.ServerData.getDefaultInstance()) return this;
        if (other.hasSocketAddress()) {
          setSocketAddress(other.getSocketAddress());
        }
        if (other.hasRack()) {
          setRack(other.getRack());
        }
        if (other.hasStat()) {
          setStat(other.getStat());
        }
        if (other.hasCapacityLeft()) {
          setCapacityLeft(other.getCapacityLeft());
        }
        if (!other.ensembleList_.isEmpty()) {
          if (result.ensembleList_.isEmpty()) {
            result.ensembleList_ = new java.util.ArrayList<java.lang.String>();
          }
          result.ensembleList_.addAll(other.ensembleList_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setSocketAddress(input.readString());
              break;
            }
            case 18: {
              setRack(input.readString());
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              zookeeper.util.Znode.ServerData.Status value = zookeeper.util.Znode.ServerData.Status.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                setStat(value);
              }
              break;
            }
            case 32: {
              setCapacityLeft(input.readInt32());
              break;
            }
            case 42: {
              addEnsembleList(input.readString());
              break;
            }
          }
        }
      }
      
      
      // required string socketAddress = 1;
      public boolean hasSocketAddress() {
        return result.hasSocketAddress();
      }
      public java.lang.String getSocketAddress() {
        return result.getSocketAddress();
      }
      public Builder setSocketAddress(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasSocketAddress = true;
        result.socketAddress_ = value;
        return this;
      }
      public Builder clearSocketAddress() {
        result.hasSocketAddress = false;
        result.socketAddress_ = getDefaultInstance().getSocketAddress();
        return this;
      }
      
      // optional string rack = 2;
      public boolean hasRack() {
        return result.hasRack();
      }
      public java.lang.String getRack() {
        return result.getRack();
      }
      public Builder setRack(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasRack = true;
        result.rack_ = value;
        return this;
      }
      public Builder clearRack() {
        result.hasRack = false;
        result.rack_ = getDefaultInstance().getRack();
        return this;
      }
      
      // optional .serialization.ServerData.Status stat = 3;
      public boolean hasStat() {
        return result.hasStat();
      }
      public zookeeper.util.Znode.ServerData.Status getStat() {
        return result.getStat();
      }
      public Builder setStat(zookeeper.util.Znode.ServerData.Status value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasStat = true;
        result.stat_ = value;
        return this;
      }
      public Builder clearStat() {
        result.hasStat = false;
        result.stat_ = zookeeper.util.Znode.ServerData.Status.ACCEPT_ENSEMBLE_REQUEST;
        return this;
      }
      
      // optional int32 capacityLeft = 4;
      public boolean hasCapacityLeft() {
        return result.hasCapacityLeft();
      }
      public int getCapacityLeft() {
        return result.getCapacityLeft();
      }
      public Builder setCapacityLeft(int value) {
        result.hasCapacityLeft = true;
        result.capacityLeft_ = value;
        return this;
      }
      public Builder clearCapacityLeft() {
        result.hasCapacityLeft = false;
        result.capacityLeft_ = 0;
        return this;
      }
      
      // repeated string ensembleList = 5;
      public java.util.List<java.lang.String> getEnsembleListList() {
        return java.util.Collections.unmodifiableList(result.ensembleList_);
      }
      public int getEnsembleListCount() {
        return result.getEnsembleListCount();
      }
      public java.lang.String getEnsembleList(int index) {
        return result.getEnsembleList(index);
      }
      public Builder setEnsembleList(int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.ensembleList_.set(index, value);
        return this;
      }
      public Builder addEnsembleList(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  if (result.ensembleList_.isEmpty()) {
          result.ensembleList_ = new java.util.ArrayList<java.lang.String>();
        }
        result.ensembleList_.add(value);
        return this;
      }
      public Builder addAllEnsembleList(
          java.lang.Iterable<? extends java.lang.String> values) {
        if (result.ensembleList_.isEmpty()) {
          result.ensembleList_ = new java.util.ArrayList<java.lang.String>();
        }
        super.addAll(values, result.ensembleList_);
        return this;
      }
      public Builder clearEnsembleList() {
        result.ensembleList_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:serialization.ServerData)
    }
    
    static {
      defaultInstance = new ServerData(true);
      zookeeper.util.Znode.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:serialization.ServerData)
  }
  
  public static final class SortedServers extends
      com.google.protobuf.GeneratedMessage {
    // Use SortedServers.newBuilder() to construct.
    private SortedServers() {
      initFields();
    }
    private SortedServers(boolean noInit) {}
    
    private static final SortedServers defaultInstance;
    public static SortedServers getDefaultInstance() {
      return defaultInstance;
    }
    
    public SortedServers getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return zookeeper.util.Znode.internal_static_serialization_SortedServers_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return zookeeper.util.Znode.internal_static_serialization_SortedServers_fieldAccessorTable;
    }
    
    // repeated .serialization.ServerData sortedServers = 1;
    public static final int SORTEDSERVERS_FIELD_NUMBER = 1;
    private java.util.List<zookeeper.util.Znode.ServerData> sortedServers_ =
      java.util.Collections.emptyList();
    public java.util.List<zookeeper.util.Znode.ServerData> getSortedServersList() {
      return sortedServers_;
    }
    public int getSortedServersCount() { return sortedServers_.size(); }
    public zookeeper.util.Znode.ServerData getSortedServers(int index) {
      return sortedServers_.get(index);
    }
    
    // repeated int32 leaderIndex = 2;
    public static final int LEADERINDEX_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> leaderIndex_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getLeaderIndexList() {
      return leaderIndex_;
    }
    public int getLeaderIndexCount() { return leaderIndex_.size(); }
    public int getLeaderIndex(int index) {
      return leaderIndex_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      for (zookeeper.util.Znode.ServerData element : getSortedServersList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (zookeeper.util.Znode.ServerData element : getSortedServersList()) {
        output.writeMessage(1, element);
      }
      for (int element : getLeaderIndexList()) {
        output.writeInt32(2, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (zookeeper.util.Znode.ServerData element : getSortedServersList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      {
        int dataSize = 0;
        for (int element : getLeaderIndexList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getLeaderIndexList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static zookeeper.util.Znode.SortedServers parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static zookeeper.util.Znode.SortedServers parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static zookeeper.util.Znode.SortedServers parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static zookeeper.util.Znode.SortedServers parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static zookeeper.util.Znode.SortedServers parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static zookeeper.util.Znode.SortedServers parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static zookeeper.util.Znode.SortedServers parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static zookeeper.util.Znode.SortedServers parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static zookeeper.util.Znode.SortedServers parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static zookeeper.util.Znode.SortedServers parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(zookeeper.util.Znode.SortedServers prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private zookeeper.util.Znode.SortedServers result;
      
      // Construct using zookeeper.util.Znode.SortedServers.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new zookeeper.util.Znode.SortedServers();
        return builder;
      }
      
      protected zookeeper.util.Znode.SortedServers internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new zookeeper.util.Znode.SortedServers();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return zookeeper.util.Znode.SortedServers.getDescriptor();
      }
      
      public zookeeper.util.Znode.SortedServers getDefaultInstanceForType() {
        return zookeeper.util.Znode.SortedServers.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public zookeeper.util.Znode.SortedServers build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private zookeeper.util.Znode.SortedServers buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public zookeeper.util.Znode.SortedServers buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.sortedServers_ != java.util.Collections.EMPTY_LIST) {
          result.sortedServers_ =
            java.util.Collections.unmodifiableList(result.sortedServers_);
        }
        if (result.leaderIndex_ != java.util.Collections.EMPTY_LIST) {
          result.leaderIndex_ =
            java.util.Collections.unmodifiableList(result.leaderIndex_);
        }
        zookeeper.util.Znode.SortedServers returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof zookeeper.util.Znode.SortedServers) {
          return mergeFrom((zookeeper.util.Znode.SortedServers)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(zookeeper.util.Znode.SortedServers other) {
        if (other == zookeeper.util.Znode.SortedServers.getDefaultInstance()) return this;
        if (!other.sortedServers_.isEmpty()) {
          if (result.sortedServers_.isEmpty()) {
            result.sortedServers_ = new java.util.ArrayList<zookeeper.util.Znode.ServerData>();
          }
          result.sortedServers_.addAll(other.sortedServers_);
        }
        if (!other.leaderIndex_.isEmpty()) {
          if (result.leaderIndex_.isEmpty()) {
            result.leaderIndex_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.leaderIndex_.addAll(other.leaderIndex_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              zookeeper.util.Znode.ServerData.Builder subBuilder = zookeeper.util.Znode.ServerData.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addSortedServers(subBuilder.buildPartial());
              break;
            }
            case 16: {
              addLeaderIndex(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addLeaderIndex(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      }
      
      
      // repeated .serialization.ServerData sortedServers = 1;
      public java.util.List<zookeeper.util.Znode.ServerData> getSortedServersList() {
        return java.util.Collections.unmodifiableList(result.sortedServers_);
      }
      public int getSortedServersCount() {
        return result.getSortedServersCount();
      }
      public zookeeper.util.Znode.ServerData getSortedServers(int index) {
        return result.getSortedServers(index);
      }
      public Builder setSortedServers(int index, zookeeper.util.Znode.ServerData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.sortedServers_.set(index, value);
        return this;
      }
      public Builder setSortedServers(int index, zookeeper.util.Znode.ServerData.Builder builderForValue) {
        result.sortedServers_.set(index, builderForValue.build());
        return this;
      }
      public Builder addSortedServers(zookeeper.util.Znode.ServerData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.sortedServers_.isEmpty()) {
          result.sortedServers_ = new java.util.ArrayList<zookeeper.util.Znode.ServerData>();
        }
        result.sortedServers_.add(value);
        return this;
      }
      public Builder addSortedServers(zookeeper.util.Znode.ServerData.Builder builderForValue) {
        if (result.sortedServers_.isEmpty()) {
          result.sortedServers_ = new java.util.ArrayList<zookeeper.util.Znode.ServerData>();
        }
        result.sortedServers_.add(builderForValue.build());
        return this;
      }
      public Builder addAllSortedServers(
          java.lang.Iterable<? extends zookeeper.util.Znode.ServerData> values) {
        if (result.sortedServers_.isEmpty()) {
          result.sortedServers_ = new java.util.ArrayList<zookeeper.util.Znode.ServerData>();
        }
        super.addAll(values, result.sortedServers_);
        return this;
      }
      public Builder clearSortedServers() {
        result.sortedServers_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated int32 leaderIndex = 2;
      public java.util.List<java.lang.Integer> getLeaderIndexList() {
        return java.util.Collections.unmodifiableList(result.leaderIndex_);
      }
      public int getLeaderIndexCount() {
        return result.getLeaderIndexCount();
      }
      public int getLeaderIndex(int index) {
        return result.getLeaderIndex(index);
      }
      public Builder setLeaderIndex(int index, int value) {
        result.leaderIndex_.set(index, value);
        return this;
      }
      public Builder addLeaderIndex(int value) {
        if (result.leaderIndex_.isEmpty()) {
          result.leaderIndex_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.leaderIndex_.add(value);
        return this;
      }
      public Builder addAllLeaderIndex(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.leaderIndex_.isEmpty()) {
          result.leaderIndex_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.leaderIndex_);
        return this;
      }
      public Builder clearLeaderIndex() {
        result.leaderIndex_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:serialization.SortedServers)
    }
    
    static {
      defaultInstance = new SortedServers(true);
      zookeeper.util.Znode.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:serialization.SortedServers)
  }
  
  public static final class EnsembleData extends
      com.google.protobuf.GeneratedMessage {
    // Use EnsembleData.newBuilder() to construct.
    private EnsembleData() {
      initFields();
    }
    private EnsembleData(boolean noInit) {}
    
    private static final EnsembleData defaultInstance;
    public static EnsembleData getDefaultInstance() {
      return defaultInstance;
    }
    
    public EnsembleData getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return zookeeper.util.Znode.internal_static_serialization_EnsembleData_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return zookeeper.util.Znode.internal_static_serialization_EnsembleData_fieldAccessorTable;
    }
    
    public enum Status
        implements com.google.protobuf.ProtocolMessageEnum {
      ACCPT_CONNECTION(0, 0),
      REJECT_CONNECTION(1, 1),
      REPAIRING(2, 2),
      ;
      
      
      public final int getNumber() { return value; }
      
      public static Status valueOf(int value) {
        switch (value) {
          case 0: return ACCPT_CONNECTION;
          case 1: return REJECT_CONNECTION;
          case 2: return REPAIRING;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<Status>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Status>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Status>() {
              public Status findValueByNumber(int number) {
                return Status.valueOf(number)
      ;        }
            };
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return zookeeper.util.Znode.EnsembleData.getDescriptor().getEnumTypes().get(0);
      }
      
      private static final Status[] VALUES = {
        ACCPT_CONNECTION, REJECT_CONNECTION, REPAIRING, 
      };
      public static Status valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      private final int index;
      private final int value;
      private Status(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      static {
        zookeeper.util.Znode.getDescriptor();
      }
      
      // @@protoc_insertion_point(enum_scope:serialization.EnsembleData.Status)
    }
    
    public static final class Member extends
        com.google.protobuf.GeneratedMessage {
      // Use Member.newBuilder() to construct.
      private Member() {
        initFields();
      }
      private Member(boolean noInit) {}
      
      private static final Member defaultInstance;
      public static Member getDefaultInstance() {
        return defaultInstance;
      }
      
      public Member getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return zookeeper.util.Znode.internal_static_serialization_EnsembleData_Member_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return zookeeper.util.Znode.internal_static_serialization_EnsembleData_Member_fieldAccessorTable;
      }
      
      // required string socketAddress = 1;
      public static final int SOCKETADDRESS_FIELD_NUMBER = 1;
      private boolean hasSocketAddress;
      private java.lang.String socketAddress_ = "";
      public boolean hasSocketAddress() { return hasSocketAddress; }
      public java.lang.String getSocketAddress() { return socketAddress_; }
      
      // repeated string heads = 2;
      public static final int HEADS_FIELD_NUMBER = 2;
      private java.util.List<java.lang.String> heads_ =
        java.util.Collections.emptyList();
      public java.util.List<java.lang.String> getHeadsList() {
        return heads_;
      }
      public int getHeadsCount() { return heads_.size(); }
      public java.lang.String getHeads(int index) {
        return heads_.get(index);
      }
      
      // repeated string tails = 3;
      public static final int TAILS_FIELD_NUMBER = 3;
      private java.util.List<java.lang.String> tails_ =
        java.util.Collections.emptyList();
      public java.util.List<java.lang.String> getTailsList() {
        return tails_;
      }
      public int getTailsCount() { return tails_.size(); }
      public java.lang.String getTails(int index) {
        return tails_.get(index);
      }
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        if (!hasSocketAddress) return false;
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasSocketAddress()) {
          output.writeString(1, getSocketAddress());
        }
        for (java.lang.String element : getHeadsList()) {
          output.writeString(2, element);
        }
        for (java.lang.String element : getTailsList()) {
          output.writeString(3, element);
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasSocketAddress()) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(1, getSocketAddress());
        }
        {
          int dataSize = 0;
          for (java.lang.String element : getHeadsList()) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * getHeadsList().size();
        }
        {
          int dataSize = 0;
          for (java.lang.String element : getTailsList()) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * getTailsList().size();
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static zookeeper.util.Znode.EnsembleData.Member parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static zookeeper.util.Znode.EnsembleData.Member parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static zookeeper.util.Znode.EnsembleData.Member parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static zookeeper.util.Znode.EnsembleData.Member parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static zookeeper.util.Znode.EnsembleData.Member parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static zookeeper.util.Znode.EnsembleData.Member parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static zookeeper.util.Znode.EnsembleData.Member parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static zookeeper.util.Znode.EnsembleData.Member parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static zookeeper.util.Znode.EnsembleData.Member parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static zookeeper.util.Znode.EnsembleData.Member parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(zookeeper.util.Znode.EnsembleData.Member prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private zookeeper.util.Znode.EnsembleData.Member result;
        
        // Construct using zookeeper.util.Znode.EnsembleData.Member.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new zookeeper.util.Znode.EnsembleData.Member();
          return builder;
        }
        
        protected zookeeper.util.Znode.EnsembleData.Member internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new zookeeper.util.Znode.EnsembleData.Member();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return zookeeper.util.Znode.EnsembleData.Member.getDescriptor();
        }
        
        public zookeeper.util.Znode.EnsembleData.Member getDefaultInstanceForType() {
          return zookeeper.util.Znode.EnsembleData.Member.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public zookeeper.util.Znode.EnsembleData.Member build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private zookeeper.util.Znode.EnsembleData.Member buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public zookeeper.util.Znode.EnsembleData.Member buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          if (result.heads_ != java.util.Collections.EMPTY_LIST) {
            result.heads_ =
              java.util.Collections.unmodifiableList(result.heads_);
          }
          if (result.tails_ != java.util.Collections.EMPTY_LIST) {
            result.tails_ =
              java.util.Collections.unmodifiableList(result.tails_);
          }
          zookeeper.util.Znode.EnsembleData.Member returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof zookeeper.util.Znode.EnsembleData.Member) {
            return mergeFrom((zookeeper.util.Znode.EnsembleData.Member)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(zookeeper.util.Znode.EnsembleData.Member other) {
          if (other == zookeeper.util.Znode.EnsembleData.Member.getDefaultInstance()) return this;
          if (other.hasSocketAddress()) {
            setSocketAddress(other.getSocketAddress());
          }
          if (!other.heads_.isEmpty()) {
            if (result.heads_.isEmpty()) {
              result.heads_ = new java.util.ArrayList<java.lang.String>();
            }
            result.heads_.addAll(other.heads_);
          }
          if (!other.tails_.isEmpty()) {
            if (result.tails_.isEmpty()) {
              result.tails_ = new java.util.ArrayList<java.lang.String>();
            }
            result.tails_.addAll(other.tails_);
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 10: {
                setSocketAddress(input.readString());
                break;
              }
              case 18: {
                addHeads(input.readString());
                break;
              }
              case 26: {
                addTails(input.readString());
                break;
              }
            }
          }
        }
        
        
        // required string socketAddress = 1;
        public boolean hasSocketAddress() {
          return result.hasSocketAddress();
        }
        public java.lang.String getSocketAddress() {
          return result.getSocketAddress();
        }
        public Builder setSocketAddress(java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  result.hasSocketAddress = true;
          result.socketAddress_ = value;
          return this;
        }
        public Builder clearSocketAddress() {
          result.hasSocketAddress = false;
          result.socketAddress_ = getDefaultInstance().getSocketAddress();
          return this;
        }
        
        // repeated string heads = 2;
        public java.util.List<java.lang.String> getHeadsList() {
          return java.util.Collections.unmodifiableList(result.heads_);
        }
        public int getHeadsCount() {
          return result.getHeadsCount();
        }
        public java.lang.String getHeads(int index) {
          return result.getHeads(index);
        }
        public Builder setHeads(int index, java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  result.heads_.set(index, value);
          return this;
        }
        public Builder addHeads(java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  if (result.heads_.isEmpty()) {
            result.heads_ = new java.util.ArrayList<java.lang.String>();
          }
          result.heads_.add(value);
          return this;
        }
        public Builder addAllHeads(
            java.lang.Iterable<? extends java.lang.String> values) {
          if (result.heads_.isEmpty()) {
            result.heads_ = new java.util.ArrayList<java.lang.String>();
          }
          super.addAll(values, result.heads_);
          return this;
        }
        public Builder clearHeads() {
          result.heads_ = java.util.Collections.emptyList();
          return this;
        }
        
        // repeated string tails = 3;
        public java.util.List<java.lang.String> getTailsList() {
          return java.util.Collections.unmodifiableList(result.tails_);
        }
        public int getTailsCount() {
          return result.getTailsCount();
        }
        public java.lang.String getTails(int index) {
          return result.getTails(index);
        }
        public Builder setTails(int index, java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  result.tails_.set(index, value);
          return this;
        }
        public Builder addTails(java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  if (result.tails_.isEmpty()) {
            result.tails_ = new java.util.ArrayList<java.lang.String>();
          }
          result.tails_.add(value);
          return this;
        }
        public Builder addAllTails(
            java.lang.Iterable<? extends java.lang.String> values) {
          if (result.tails_.isEmpty()) {
            result.tails_ = new java.util.ArrayList<java.lang.String>();
          }
          super.addAll(values, result.tails_);
          return this;
        }
        public Builder clearTails() {
          result.tails_ = java.util.Collections.emptyList();
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:serialization.EnsembleData.Member)
      }
      
      static {
        defaultInstance = new Member(true);
        zookeeper.util.Znode.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:serialization.EnsembleData.Member)
    }
    
    // optional string leader = 1;
    public static final int LEADER_FIELD_NUMBER = 1;
    private boolean hasLeader;
    private java.lang.String leader_ = "";
    public boolean hasLeader() { return hasLeader; }
    public java.lang.String getLeader() { return leader_; }
    
    // repeated .serialization.EnsembleData.Member members = 2;
    public static final int MEMBERS_FIELD_NUMBER = 2;
    private java.util.List<zookeeper.util.Znode.EnsembleData.Member> members_ =
      java.util.Collections.emptyList();
    public java.util.List<zookeeper.util.Znode.EnsembleData.Member> getMembersList() {
      return members_;
    }
    public int getMembersCount() { return members_.size(); }
    public zookeeper.util.Znode.EnsembleData.Member getMembers(int index) {
      return members_.get(index);
    }
    
    // optional .serialization.EnsembleData.Status stat = 3;
    public static final int STAT_FIELD_NUMBER = 3;
    private boolean hasStat;
    private zookeeper.util.Znode.EnsembleData.Status stat_;
    public boolean hasStat() { return hasStat; }
    public zookeeper.util.Znode.EnsembleData.Status getStat() { return stat_; }
    
    // optional int32 capacityLeft = 4;
    public static final int CAPACITYLEFT_FIELD_NUMBER = 4;
    private boolean hasCapacityLeft;
    private int capacityLeft_ = 0;
    public boolean hasCapacityLeft() { return hasCapacityLeft; }
    public int getCapacityLeft() { return capacityLeft_; }
    
    private void initFields() {
      stat_ = zookeeper.util.Znode.EnsembleData.Status.ACCPT_CONNECTION;
    }
    public final boolean isInitialized() {
      for (zookeeper.util.Znode.EnsembleData.Member element : getMembersList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasLeader()) {
        output.writeString(1, getLeader());
      }
      for (zookeeper.util.Znode.EnsembleData.Member element : getMembersList()) {
        output.writeMessage(2, element);
      }
      if (hasStat()) {
        output.writeEnum(3, getStat().getNumber());
      }
      if (hasCapacityLeft()) {
        output.writeInt32(4, getCapacityLeft());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasLeader()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getLeader());
      }
      for (zookeeper.util.Znode.EnsembleData.Member element : getMembersList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, element);
      }
      if (hasStat()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, getStat().getNumber());
      }
      if (hasCapacityLeft()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, getCapacityLeft());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static zookeeper.util.Znode.EnsembleData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static zookeeper.util.Znode.EnsembleData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static zookeeper.util.Znode.EnsembleData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static zookeeper.util.Znode.EnsembleData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static zookeeper.util.Znode.EnsembleData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static zookeeper.util.Znode.EnsembleData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static zookeeper.util.Znode.EnsembleData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static zookeeper.util.Znode.EnsembleData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static zookeeper.util.Znode.EnsembleData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static zookeeper.util.Znode.EnsembleData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(zookeeper.util.Znode.EnsembleData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private zookeeper.util.Znode.EnsembleData result;
      
      // Construct using zookeeper.util.Znode.EnsembleData.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new zookeeper.util.Znode.EnsembleData();
        return builder;
      }
      
      protected zookeeper.util.Znode.EnsembleData internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new zookeeper.util.Znode.EnsembleData();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return zookeeper.util.Znode.EnsembleData.getDescriptor();
      }
      
      public zookeeper.util.Znode.EnsembleData getDefaultInstanceForType() {
        return zookeeper.util.Znode.EnsembleData.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public zookeeper.util.Znode.EnsembleData build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private zookeeper.util.Znode.EnsembleData buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public zookeeper.util.Znode.EnsembleData buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.members_ != java.util.Collections.EMPTY_LIST) {
          result.members_ =
            java.util.Collections.unmodifiableList(result.members_);
        }
        zookeeper.util.Znode.EnsembleData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof zookeeper.util.Znode.EnsembleData) {
          return mergeFrom((zookeeper.util.Znode.EnsembleData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(zookeeper.util.Znode.EnsembleData other) {
        if (other == zookeeper.util.Znode.EnsembleData.getDefaultInstance()) return this;
        if (other.hasLeader()) {
          setLeader(other.getLeader());
        }
        if (!other.members_.isEmpty()) {
          if (result.members_.isEmpty()) {
            result.members_ = new java.util.ArrayList<zookeeper.util.Znode.EnsembleData.Member>();
          }
          result.members_.addAll(other.members_);
        }
        if (other.hasStat()) {
          setStat(other.getStat());
        }
        if (other.hasCapacityLeft()) {
          setCapacityLeft(other.getCapacityLeft());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setLeader(input.readString());
              break;
            }
            case 18: {
              zookeeper.util.Znode.EnsembleData.Member.Builder subBuilder = zookeeper.util.Znode.EnsembleData.Member.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addMembers(subBuilder.buildPartial());
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              zookeeper.util.Znode.EnsembleData.Status value = zookeeper.util.Znode.EnsembleData.Status.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                setStat(value);
              }
              break;
            }
            case 32: {
              setCapacityLeft(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional string leader = 1;
      public boolean hasLeader() {
        return result.hasLeader();
      }
      public java.lang.String getLeader() {
        return result.getLeader();
      }
      public Builder setLeader(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasLeader = true;
        result.leader_ = value;
        return this;
      }
      public Builder clearLeader() {
        result.hasLeader = false;
        result.leader_ = getDefaultInstance().getLeader();
        return this;
      }
      
      // repeated .serialization.EnsembleData.Member members = 2;
      public java.util.List<zookeeper.util.Znode.EnsembleData.Member> getMembersList() {
        return java.util.Collections.unmodifiableList(result.members_);
      }
      public int getMembersCount() {
        return result.getMembersCount();
      }
      public zookeeper.util.Znode.EnsembleData.Member getMembers(int index) {
        return result.getMembers(index);
      }
      public Builder setMembers(int index, zookeeper.util.Znode.EnsembleData.Member value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.members_.set(index, value);
        return this;
      }
      public Builder setMembers(int index, zookeeper.util.Znode.EnsembleData.Member.Builder builderForValue) {
        result.members_.set(index, builderForValue.build());
        return this;
      }
      public Builder addMembers(zookeeper.util.Znode.EnsembleData.Member value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.members_.isEmpty()) {
          result.members_ = new java.util.ArrayList<zookeeper.util.Znode.EnsembleData.Member>();
        }
        result.members_.add(value);
        return this;
      }
      public Builder addMembers(zookeeper.util.Znode.EnsembleData.Member.Builder builderForValue) {
        if (result.members_.isEmpty()) {
          result.members_ = new java.util.ArrayList<zookeeper.util.Znode.EnsembleData.Member>();
        }
        result.members_.add(builderForValue.build());
        return this;
      }
      public Builder addAllMembers(
          java.lang.Iterable<? extends zookeeper.util.Znode.EnsembleData.Member> values) {
        if (result.members_.isEmpty()) {
          result.members_ = new java.util.ArrayList<zookeeper.util.Znode.EnsembleData.Member>();
        }
        super.addAll(values, result.members_);
        return this;
      }
      public Builder clearMembers() {
        result.members_ = java.util.Collections.emptyList();
        return this;
      }
      
      // optional .serialization.EnsembleData.Status stat = 3;
      public boolean hasStat() {
        return result.hasStat();
      }
      public zookeeper.util.Znode.EnsembleData.Status getStat() {
        return result.getStat();
      }
      public Builder setStat(zookeeper.util.Znode.EnsembleData.Status value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasStat = true;
        result.stat_ = value;
        return this;
      }
      public Builder clearStat() {
        result.hasStat = false;
        result.stat_ = zookeeper.util.Znode.EnsembleData.Status.ACCPT_CONNECTION;
        return this;
      }
      
      // optional int32 capacityLeft = 4;
      public boolean hasCapacityLeft() {
        return result.hasCapacityLeft();
      }
      public int getCapacityLeft() {
        return result.getCapacityLeft();
      }
      public Builder setCapacityLeft(int value) {
        result.hasCapacityLeft = true;
        result.capacityLeft_ = value;
        return this;
      }
      public Builder clearCapacityLeft() {
        result.hasCapacityLeft = false;
        result.capacityLeft_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:serialization.EnsembleData)
    }
    
    static {
      defaultInstance = new EnsembleData(true);
      zookeeper.util.Znode.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:serialization.EnsembleData)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_serialization_ServerData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_serialization_ServerData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_serialization_SortedServers_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_serialization_SortedServers_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_serialization_EnsembleData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_serialization_EnsembleData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_serialization_EnsembleData_Member_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_serialization_EnsembleData_Member_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\036proto/znodedatastructure.proto\022\rserial" +
      "ization\"\321\001\n\nServerData\022\025\n\rsocketAddress\030" +
      "\001 \002(\t\022\014\n\004rack\030\002 \001(\t\022.\n\004stat\030\003 \001(\0162 .seri" +
      "alization.ServerData.Status\022\024\n\014capacityL" +
      "eft\030\004 \001(\005\022\024\n\014ensembleList\030\005 \003(\t\"B\n\006Statu" +
      "s\022\033\n\027ACCEPT_ENSEMBLE_REQUEST\020\000\022\033\n\027REJECT" +
      "_ENSEMBLE_REQUEST\020\001\"V\n\rSortedServers\0220\n\r" +
      "sortedServers\030\001 \003(\0132\031.serialization.Serv" +
      "erData\022\023\n\013leaderIndex\030\002 \003(\005\"\240\002\n\014Ensemble" +
      "Data\022\016\n\006leader\030\001 \001(\t\0223\n\007members\030\002 \003(\0132\".",
      "serialization.EnsembleData.Member\0220\n\004sta" +
      "t\030\003 \001(\0162\".serialization.EnsembleData.Sta" +
      "tus\022\024\n\014capacityLeft\030\004 \001(\005\032=\n\006Member\022\025\n\rs" +
      "ocketAddress\030\001 \002(\t\022\r\n\005heads\030\002 \003(\t\022\r\n\005tai" +
      "ls\030\003 \003(\t\"D\n\006Status\022\024\n\020ACCPT_CONNECTION\020\000" +
      "\022\025\n\021REJECT_CONNECTION\020\001\022\r\n\tREPAIRING\020\002B\027" +
      "\n\016zookeeper.utilB\005Znode"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_serialization_ServerData_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_serialization_ServerData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_serialization_ServerData_descriptor,
              new java.lang.String[] { "SocketAddress", "Rack", "Stat", "CapacityLeft", "EnsembleList", },
              zookeeper.util.Znode.ServerData.class,
              zookeeper.util.Znode.ServerData.Builder.class);
          internal_static_serialization_SortedServers_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_serialization_SortedServers_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_serialization_SortedServers_descriptor,
              new java.lang.String[] { "SortedServers", "LeaderIndex", },
              zookeeper.util.Znode.SortedServers.class,
              zookeeper.util.Znode.SortedServers.Builder.class);
          internal_static_serialization_EnsembleData_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_serialization_EnsembleData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_serialization_EnsembleData_descriptor,
              new java.lang.String[] { "Leader", "Members", "Stat", "CapacityLeft", },
              zookeeper.util.Znode.EnsembleData.class,
              zookeeper.util.Znode.EnsembleData.Builder.class);
          internal_static_serialization_EnsembleData_Member_descriptor =
            internal_static_serialization_EnsembleData_descriptor.getNestedTypes().get(0);
          internal_static_serialization_EnsembleData_Member_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_serialization_EnsembleData_Member_descriptor,
              new java.lang.String[] { "SocketAddress", "Heads", "Tails", },
              zookeeper.util.Znode.EnsembleData.Member.class,
              zookeeper.util.Znode.EnsembleData.Member.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
